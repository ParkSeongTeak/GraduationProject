1. 과제 개요
  - 주제에 대한 전반적인 내용을 요약해서 기술 - 기획
 이번 과제에서는 상용 게임 엔진인 Unity를 사용하여 여러 명의 플레이어가 함께 플레이 할 수 있는 온라인 게임을 개발하는 것을 목표로 합니다. 
 우선 플레이어는 회원가입을 진행합니다. 비밀번호는 해시 함수를 거친 후 저장합니다. 플레이어 데이터는 이메일을 키로 하는 DB에 저장합니다. 
 어몽어스 등의 게임에서와 같이, 플레이어는 대기실을 생성하거나, 이미 존재하는 대기실에 참가할 수 있습니다. 한 대기실에는 최대 4명의 플레이어가 참가할 수 있습니다. 방을 생성한 플레이어가 게임을 시작할 시, 각 플레이어는 캐릭터를 선택합니다. 캐릭터는 전사, 화승총병, 마법사, 사제로 4가지가 있으며, 중복 선택이 가능합니다. 일정 시간이 지날 때마다, 라운드가 진행됩니다. 각 라운드마다 정해진 양의 몬스터가 소환됩니다. 몬스터는 맵 중앙의 코어를 향해 다가오며, 코어만을 공격합니다. 플레이어는 몬스터를 처치하여 코어를 지켜야 합니다.
 몬스터를 처치할 때마다, 모든 플레이어는 재화를 얻습니다. 플레이어는 재화를 사용하여 유물 뽑기를 수행할 수 있습니다. 유물은 플레이어 당 최대 8개를 보유할 수 있으며, 그 이상 가질 시 하나를 제거해야 합니다. 유물은 플레이어의 공격력, 공격 범위 등 이로운 효과를 줍니다. 이 재화와 유물은 DB에 저장되는 것이 아니라, 매 판마다 초기화됩니다. 
 최종 라운드까지 맵 중앙의 코어를 지키면서, 모든 몬스터를 처치하면 게임을 클리어합니다. 
 이 게임은 C# 언어를 기반으로 아마존의 AWS 서버 또는 마이크로소프트의 서버를 사용하여 구현됩니다. 우리는 TCP 소켓 네트워크 통신을 이용하여 게임 클라이언트와 서버 간의 통신을 구현할 것이며, 직접 정의한 패킷을 사용하여 데이터 전송을 처리할 것입니다. 게임 내에서 발생하는 플레이어의 조작, 몬스터의 움직임 등 이벤트들은 서버에서 처리되어 결과가 클라이언트에게 전달됩니다. 또한, 게임 서버는 동시 접속자 100명 이하의 사용자들의 동시 접속에 대응할 수 있을 것을 최소한의 조건으로 개발할 것입니다.

2. 필요성 및 동기
  - 주제를 결정하게 된 동기 및 개발 필요성에 대해 기술
저희의 가장 큰 목표는 재미있는 게임입니다. 실현 가능성을 위해, 재미있으면서도, 라이트한 게임을 목표로 잡았습니다. 이를 위해 비슷한 요구사항을 가진 게임을 탐색했습니다.
2) 그렇게 찾은 첫 번째 게임은 메이플 운빨 디펜스입니다. 메운디는 스타크래프트의 유저 제작 컨텐츠입니다. 이 게임은 스타크래프트라는 게임이 재조명될 정도로 인기를 얻었습니다.
 그래서 저희는 이 게임에서 아이디어를 차용하여 플레이어 간의 상호작용과, 플레이어-몬스터 간 상호작용을 극단적으로 줄이지만 확률적 요소를 통해 게임적 재미를 챙길 수 있는 게임을 구상하기로 방향성을 잡았습니다.
3) 하지만 우리는 차별점을 두어, 플레이어 한 명이 하나의 캐릭터 만을 조작하는 시스템으로 설정하였습니다. 따라서 메운디 재미의 원천인 뽑기를 캐릭터 뽑기에 적용하는 것이 아니라 다른 방식이 필요했습니다.
4) 이에 또 참고한 게임은 아이작의 번제입니다. 아이작의 번제는 아이템에 확률적 요소를 적용한 게임입니다. 획득하는 아이템에 따라 플레이 스타일이 크게 달라지기 때문에, 같은 패턴의 적이더라도 아이템에 따라 매판 신선한 느낌을 받을 수 있습니다. 
5)  따라서 두 가지 게임을 차용하여, 개발 가성비가 높은 디펜스를 기초로 하되, 아이템 뽑기로 신선한 재미를 얻을 수 있는 게임으로 방향성을 잡았습니다. 5~10종의 아이템을 기획하고, 하나의 아이템에서 등급을 세분화하여 상위 등급의 아이템에 출현 확률을 극단적으로 낮추었습니다. 

3. 요소 기술
  - 구현을 위해 필요한 기술들을 구체적으로 기술
  - 기존 기술(reuse 가능한 기술)
  - 차별화 혹은 중점 기술
Unity Engine: Unity는 게임 개발을 위한 인기있는 크로스 플랫폼 게임 엔진입니다. Unity를 사용하면 쉽게 멀티플레이어 게임을 개발할 수 있으며, 다양한 플랫폼에서 실행될 수 있습니다.


C# 언어: Unity는 C# 언어를 지원하며, C# 언어를 사용하여 Unity에서 게임 로직을 작성할 수 있습니다. 게임 로직에는 게임 내 캐릭터 및 아이템의 동작, 물리 엔진, 그래픽스 등이 포함됩니다. 클라이언트단 뿐만 아니라 서버도 C#을 이용하여. NET 서버를 구현함을 목표로 하고 있습니다.

AWS EC2: AWS EC2는 가상 서버를 제공하는 클라우드 컴퓨팅 서비스입니다. AWS EC2를 사용하여 게임 서버를 호스팅하면 높은 가용성과 확장성을 갖출 수 있습니다.

TCP Socket Network 통신: Unity에서는 TCP Socket Network 통신을 사용하여 게임 클라이언트와 서버 간에 데이터를 전송할 수 있습니다. 이를 통해 멀티플레이어 게임의 통신을 구현할 수 있습니다.

패킷 정의: 패킷은 네트워크에서 데이터를 전송하기 위한 최소 단위입니다. Unity에서는 직접 패킷을 정의하여 데이터를 전송할 수 있으며, 이를 통해 게임 클라이언트와 서버 간의 통신을 처리할 수 있습니다.

큐서버를 구현하기 위해서는 다음과 같은 기술들이 필요합니다:

서버 인스턴스 관리: AWS에서는 Auto Scaling 그룹을 사용하여 인스턴스를 자동으로 확장 및 축소할 수 있습니다. 이를 사용하여 게임 서버 인스턴스를 관리할 수 있습니다.

메시지 큐: AWS에서는 Amazon Simple Queue Service (SQS)를 제공하여 메시지 큐를 구현할 수 있습니다. 메시지 큐를 사용하면 게임 클라이언트의 요청을 대기열에 추가하고, 게임 서버가 사용 가능한 경우 요청을 처리할 수 있습니다.

중심 기술은 소켓 프로그래밍 클라이언트 싱크로나이즈 
socket network translation, 
포톤, 미러등 기존의 서비스를 사용하지 않고, 직접 하위레벨 네트워크 프로그래밍
client synchronization - 이걸 위해 대부분의 연산을 서버가 수행한다.

4. 상세 내용
  - 다음과 같은 네 단계 과정을 구체적으로 기술해야 함.


  4.1 요구 사항
  - 요구사항 정의 및 분석
0) api level
 23년 8월 31일부터, 구글 플레이스토어에 등록을 위해 target Android API를 33 이상으로 설정해야합니다.(현재는 31까지 가능합니다.)
 New apps and app updates must target API level 33 to be submitted to Google Play

2) 회원가입, 로그인
클라이언트에서는 자신의 이메일과 비밀번호를 서버에게 전송합니다. 비밀번호는 SHA-256 방식으로 해시하여 전송합니다. 서버에서는 이메일을 key 값으로 하는 DB를 운용합니다. 회원가입 시 insert를 진행하고 등록 성공 여부를 클라이언트에 전송합니다. 로그인 시 select를 통해 조회하여 인증 성공 여부를 클라이언트에 전송합니다.
이 과정을 위해 필요한 패킷은 다음과 같습니다.
클라이언트->서버 : 회원가입 요청, 로그인 요청
서버->클라이언트 : 회원가입 성공, 회원가입 실패(중복 이메일), 로그인 성공, 로그인 실패(아이디 또는 비밀번호 불일치)
3) 4인 협동을 위한 방 생성, 방 입장, 방 빠른 입장
서버에서 방을 dictionary와 queue로 관리합니다. 플레이어는 방 생성 시, 방 이름을 입력합니다. 방 이름이 겹친다면, 서버에서 거부합니다. 방 이름을 입력하여 다른 플레이어들이 입장할 수 있습니다. 방을 생성한 사람은 빠른 입장 설정을 할 수 있습니다. 빠른 입장 설정 시, 서버의 빠른 입장 queue에 등록합니다. 서버는 빠른 입장 요청을 받을 때마다, queue에서 꺼낸 방과 연결해줍니다.
4) 방 단위 통신 관리(브로드캐스팅), 4인 플레이 간 싱크로나이제이션
게임을 시작하면 각각의 클라이언트는 플레이어 이동, 공격 등 모든 액션에 대해 서버에 패킷을 전송합니다. 서버는 받은 패킷을 방의 클라이언트들에게 브로드캐스팅합니다. 몬스터에 관련된 연산은 서버에서 수행하며, 마찬가지로 수행 결과를 클라이언트들에게 브로드캐스팅합니다. 이를 통해 클라이언트간 수행 결과가 다를 수 있다는 문제를 막습니다.

  4.2 시스템 설계 (합성 및 분석)
    - 전체 및 세부 구조, 주요 자료구조 및 알고리즘, 사용자 인터페이스 및 데이터 관리 시스템 등 설계 
drawio. 설명 // 주요 알고리즘 // 알고리즘까진 모르겠고 디자인패턴정도는 이런걸 쓸거에요.  아이템 N개 , + 조작 버튼 스킬1 평타1// 이동용 조이스틱 //

방 번호 생성기 - queue에 미리 숫자 담아놓고 하나씩 뽑아 쓰기

방 목록은 dictionary 사용 저장, 방 번호로 빠르게 접근

빠른 입장 - queue? queue에 존재하는 데 시작한 방은 어떻게 하나? -> 뽑을 때마다 시작 여부, 방 인원수, 빠른 입장 허용 여부 판단?

몬스터 인덱서 - stack에 미리 숫자 담아놓고 하나씩 뽑아 쓰기, 숫자가 부족하면 새로 추가

로그인 시스템 - DBMS(postgreSQL? mySQL?)에 사용자 이메일 및 비밀번호 저장, 비밀번호는 해시 함수로 암호화하여 저장(SHA2 - 단방향 : 이거 쓰는 게 나을 듯), 패킷에 비밀번호 노출되지 않도록 애초에 클라이언트에서 암호화 수행 후 전송(이럼 패킷 크기 커지는 문제 있긴 함) -> 암호화 시 SHA2-256 기준 32bytes

resource caching : Resources.Load는 느리므로, Dictionary 사용하여 캐싱해둠

모두 나간 방을 어떻게 정리할까? garbage collector?(주기적으로 빈 방 정리), catch 구문에서 유저 킥 할 때, 유저 인원 수 계산, 0이면 방 폭파

  4.3 구현
  - 구체적인 구현 환경(OS, 개발 언어 및 tool 등) 기술
window 11, 개발언어 C#(Unity), visual studio // github, 플라스틱  

  4.4 시험평가 
  - 테스팅 계획 및 내용을 구체적으로 기술
로그인 대기열 스트레스 테스트,
DummyCilent 해서 100명 스트레스 테스트 행동은 방생성부터 가능한 행동중 렘덤으로 


5. 팀원의 기능 및 역할
Manager/Playable /NonePlayable/ UI /Client  / //// 클라 단
 PlayablePacketHandler/  NonePlayablePacketHandler / Server / / Socket /////서버 단 Client 


팀원 1 이우열 : Manager, Playable, UI ,PlayablePacketHandler , Server ,Client 

팀원 2 박성택 :  Manager, NonePlayable, NonePlayablePacketHandler, Server, Client 



6.  주간별/팀원별 과제 수행 계획
게임 기획 구체화 == 설계 목표 설정  1 
 
UML공부  1 2 

Unity 엔진 공부  2 3 

게임 클라이언트 설계 3 4 5

서버 공부 5 6 7 8

서버 설계 7 8

패킷 정의  8

게임 코딩  9 10 11 12 15 16

서버 코딩 12 13 14 15 16

둘 합치기 15 16

테스팅  16 17 18 19 20 
